#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Conformance Seal Demo - OpenTrust Protocol Python SDK
=====================================================

This demo showcases the **REVOLUTIONARY Conformance Seals** - the cryptographic
fingerprints that transform OTP from a trust protocol into the mathematical
embodiment of trust itself.

The Conformance Seal is a SHA-256 hash that proves a Neutrosophic Judgment was
generated using a 100% conformant OTP implementation. It provides mathematical,
irrefutable proof that the fusion operation followed the exact OTP specification.

This solves the fundamental paradox: "Who audits the auditor?"
With Conformance Seals, OTP audits itself through mathematics.
"""

import sys
import os
import time

# Add the parent directory to the path so we can import otp
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from otp import (
    NeutrosophicJudgment,
    conflict_aware_weighted_average,
    optimistic_fusion,
    pessimistic_fusion,
    generate_conformance_seal,
    verify_conformance_seal_with_inputs,
    ConformanceError
)


def main():
    """Main demonstration function."""
    print("üöÄ OpenTrust Protocol v2.0 - Conformance Seal Demo")
    print("=" * 60)
    print()
    
    print("üåü THE REVOLUTIONARY UPDATE:")
    print("OTP v2.0 introduces the Zero Pillar: Conformance Seals")
    print("This transforms OTP from a trust protocol into the")
    print("MATHEMATICAL EMBODIMENT OF TRUST ITSELF.")
    print()
    
    # Create sample judgments
    print("üìä Creating sample Neutrosophic Judgments...")
    judgment1 = NeutrosophicJudgment(
        T=0.8, I=0.2, F=0.0,
        provenance_chain=[
            {"source_id": "sensor1", "timestamp": "2023-01-01T00:00:00Z"}
        ]
    )
    
    judgment2 = NeutrosophicJudgment(
        T=0.6, I=0.3, F=0.1,
        provenance_chain=[
            {"source_id": "sensor2", "timestamp": "2023-01-01T00:00:00Z"}
        ]
    )
    
    judgment3 = NeutrosophicJudgment(
        T=0.9, I=0.05, F=0.05,
        provenance_chain=[
            {"source_id": "sensor3", "timestamp": "2023-01-01T00:00:00Z"}
        ]
    )
    
    judgments = [judgment1, judgment2, judgment3]
    weights = [0.4, 0.3, 0.3]
    
    print(f"‚úÖ Created {len(judgments)} judgments with weights: {weights}")
    print()
    
    # Demonstrate automatic Conformance Seal generation
    print("üîê Demonstrating automatic Conformance Seal generation...")
    print("Performing conflict-aware weighted average fusion...")
    
    fused = conflict_aware_weighted_average(judgments, weights)
    
    # Extract the Conformance Seal from the fused judgment
    last_entry = fused.provenance_chain[-1]
    conformance_seal = last_entry.get("conformance_seal")
    
    if conformance_seal:
        print(f"‚úÖ Conformance Seal generated: {conformance_seal[:16]}...")
        print(f"   Full seal: {conformance_seal}")
        print(f"   Seal length: {len(conformance_seal)} characters (SHA-256)")
    else:
        print("‚ùå No Conformance Seal found!")
    
    print()
    print(f"üìà Fused judgment: T={fused.T:.3f}, I={fused.I:.3f}, F={fused.F:.3f}")
    print()
    
    # Demonstrate manual seal generation
    print("üîß Demonstrating manual Conformance Seal generation...")
    try:
        manual_seal = generate_conformance_seal(judgments, weights, "otp-cawa-v1.1")
        print(f"‚úÖ Manual seal generated: {manual_seal[:16]}...")
        
        # Compare with automatic seal
        if conformance_seal == manual_seal:
            print("‚úÖ AUTOMATIC AND MANUAL SEALS MATCH!")
            print("   This proves the fusion operation generated the correct seal.")
        else:
            print("‚ùå SEALS DO NOT MATCH - This indicates an error!")
            
    except ConformanceError as e:
        print(f"‚ùå Failed to generate manual seal: {e}")
    
    print()
    
    # Demonstrate verification
    print("üîç Demonstrating Conformance Seal verification...")
    try:
        is_valid = verify_conformance_seal_with_inputs(fused, judgments, weights)
        if is_valid:
            print("‚úÖ MATHEMATICAL PROOF OF CONFORMANCE VERIFIED!")
            print("   The judgment is mathematically proven to be conformant.")
            print("   Any auditor can independently verify this proof.")
        else:
            print("‚ùå CONFORMANCE VERIFICATION FAILED!")
            print("   The judgment cannot be mathematically proven conformant.")
    except ConformanceError as e:
        print(f"‚ùå Verification failed: {e}")
    
    print()
    
    # Demonstrate tamper detection
    print("üö® Demonstrating tamper detection...")
    
    # Create a tampered judgment with a different provenance chain (simulating tampering)
    tampered_provenance = fused.provenance_chain.copy()
    # Modify the conformance seal in the last entry
    tampered_provenance[-1] = tampered_provenance[-1].copy()
    tampered_provenance[-1]["conformance_seal"] = "tampered_seal_1234567890abcdef"
    
    tampered_judgment = NeutrosophicJudgment(
        T=fused.T + 0.05,  # Tamper with T
        I=fused.I - 0.05,  # Adjust I to maintain conservation
        F=fused.F,
        provenance_chain=tampered_provenance
    )
    
    try:
        tampered_valid = verify_conformance_seal_with_inputs(
            tampered_judgment, judgments, weights
        )
        
        if not tampered_valid:
            print("‚úÖ TAMPER DETECTION SUCCESSFUL!")
            print("   The tampered judgment's seal does NOT match the re-generated seal.")
            print("   Any modification breaks the mathematical proof.")
        else:
            print("‚ùå TAMPER DETECTION FAILED!")
            print("   The tampered judgment's seal unexpectedly matched.")
            
    except ConformanceError as e:
        print(f"‚úÖ TAMPER DETECTION SUCCESSFUL! (Verification failed: {e})")
    
    print()
    
    # Demonstrate all fusion operators
    print("üîÑ Demonstrating Conformance Seals across all fusion operators...")
    
    operators = [
        ("Conflict-Aware Weighted Average", lambda: conflict_aware_weighted_average(judgments, weights)),
        ("Optimistic Fusion", lambda: optimistic_fusion(judgments)),
        ("Pessimistic Fusion", lambda: pessimistic_fusion(judgments))
    ]
    
    for op_name, op_func in operators:
        try:
            result = op_func()
            last_entry = result.provenance_chain[-1]
            seal = last_entry.get("conformance_seal", "None")
            
            print(f"  {op_name}:")
            print(f"    Result: T={result.T:.3f}, I={result.I:.3f}, F={result.F:.3f}")
            print(f"    Conformance Seal: {seal[:16] if seal != 'None' else 'None'}...")
            
        except Exception as e:
            print(f"  {op_name}: ‚ùå Error - {e}")
    
    print()
    
    # Performance test
    print("‚ö° Performance test: Generating 1000 Conformance Seals...")
    start_time = time.time()
    
    for i in range(1000):
        try:
            generate_conformance_seal(judgments, weights, f"test-operator-{i}")
        except Exception as e:
            print(f"Error in iteration {i}: {e}")
            break
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"‚úÖ Generated 1000 seals in {duration:.3f} seconds")
    print(f"   Average time per seal: {duration/1000*1000:.3f} ms")
    print(f"   Throughput: {1000/duration:.0f} seals/second")
    
    print()
    
    # Final summary
    print("üéØ REVOLUTIONARY IMPACT SUMMARY:")
    print("=" * 40)
    print("‚úÖ Conformance Seals provide mathematical proof of conformance")
    print("‚úÖ Any auditor can independently verify OTP operations")
    print("‚úÖ Tampering is immediately detectable through seal mismatch")
    print("‚úÖ OTP now audits itself through cryptography")
    print("‚úÖ The fundamental paradox 'Who audits the auditor?' is SOLVED")
    print()
    print("üåü OTP v2.0: The Mathematical Embodiment of Trust Itself")
    print("=" * 60)


if __name__ == "__main__":
    main()
